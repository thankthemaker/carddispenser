# base-image for node on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-alpine-node:6-slim

# Defines our working directory in container
RUN mkdir -p /usr/src/app/ && mkdir -p /usr/share/doc/python-rpi.gpio
WORKDIR /usr/src/app

# Install node modules, including i2c-bus without carrying all the deps in the layers
RUN apk add --no-cache make git gcc g++ linux-headers musl-dev python python-dev py-pip py-rpigpio && \
  JOBS=MAX npm install -g node-red node-red-contrib-resinio node-red-node-pisrf node-red-contrib-httpauth node-red-contrib-mongodb3 node-red-contrib-aws node-red-contrib-pn532 --production --silent && \
  pip install spidev && \
  git clone https://github.com/adafruit/Adafruit_Python_PN532.git && \
  cd Adafruit_Python_PN532 && \
  python setup.py install && \
  apk del make git gcc g++ linux-headers musl-dev python-dev py-pip && \
  npm cache clean --force && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY ./app ./
COPY ./app/PN532 /usr/local/lib/node_modules/node-red-contrib-pn532/PN532 
COPY ./app/readmifare.py /usr/local/lib/node_modules/node-red-contrib-pn532/PN532

# Enable systemd init system in container
ENV INITSYSTEM=on

# server.js will run when container starts up on the device
CMD ["bash", "/usr/src/app/start.sh"]